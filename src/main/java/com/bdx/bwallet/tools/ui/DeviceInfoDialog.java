/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bdx.bwallet.tools.ui;

import com.bdx.bwallet.protobuf.BWalletMessage;
import com.bdx.bwallet.protobuf.BWalletMessage.Features;
import com.bdx.bwallet.protobuf.BWalletType.CoinType;
import com.google.common.base.Optional;
import java.util.ResourceBundle;
import org.spongycastle.util.encoders.Hex;

/**
 *
 * @author Administrator
 */
public final class DeviceInfoDialog extends javax.swing.JDialog {

    private final ResourceBundle bundle;
    
    /**
     * Creates new form DeviceInfoDialog
     */
    public DeviceInfoDialog(java.awt.Frame parent, boolean modal, ResourceBundle bundle) {
        super(parent, modal);
        initComponents();
        this.bundle = bundle;
        this.applyResourceBundle();
    }

    public void applyResourceBundle() {
        this.setTitle(bundle.getString("DeviceInfoDialog.title"));
        this.closeButton.setText(bundle.getString("DeviceInfoDialog.closeButton.text"));
    }
    
    public void displayFeatures(Optional<BWalletMessage.Features> features) {
        if (features.isPresent()) {
            String content = "";
            Features message = features.get();
            if (message.hasMajorVersion() && message.hasMinorVersion() && message.hasPatchVersion()) {
                String key = "DeviceInfoDialog.Features.version.firmware";
                if (message.hasBootloaderMode() && message.getBootloaderMode())
                    key = "DeviceInfoDialog.Features.version.bootloader";
                String version = message.getMajorVersion() + "." + message.getMinorVersion() + "." + message.getPatchVersion();
                content += bundle.getString(key) + ": " + version + "\r\n";
            }
            if (message.hasDeviceId()) {
                content += bundle.getString("DeviceInfoDialog.Features.deviceId") + ": " + message.getDeviceId() + "\r\n";
            }
            if (message.hasLanguage()) {
                content += bundle.getString("DeviceInfoDialog.Features.language") + ": " + message.getLanguage() + "\r\n";
            }
            if (message.hasLabel()) {
                content += bundle.getString("DeviceInfoDialog.Features.label") + ": " + message.getLabel() + "\r\n";
            }
            if (message.hasPinProtection()) {
                content += bundle.getString("DeviceInfoDialog.Features.pinProtection") + ": " + bundle.getString("DeviceInfoDialog.Features." + (message.getPinProtection() ? "enabled" : "disabled")) + "\r\n";
            }
            if (message.hasPassphraseProtection()) {
                content += bundle.getString("DeviceInfoDialog.Features.passphraseProtection") + ": " + bundle.getString("DeviceInfoDialog.Features." + (message.getPassphraseProtection() ? "enabled" : "disabled")) + "\r\n";
            }
            if (message.hasInitialized()) {
                content += bundle.getString("DeviceInfoDialog.Features.initialized") + ": " + bundle.getString("DeviceInfoDialog.Features." + message.getInitialized()) + "\r\n";
            }
            if (message.hasImported()) {
                content += bundle.getString("DeviceInfoDialog.Features.imported") + ": " + bundle.getString("DeviceInfoDialog.Features." + message.getImported()) + "\r\n";
            }
            if (message.hasBootloaderHash()) {
                content += bundle.getString("DeviceInfoDialog.Features.bootloaderHash") + ": " + Hex.toHexString(message.getBootloaderHash().toByteArray()) + "\r\n";
            }
            if (message.getCoinsCount() > 0) {
                for (CoinType coin : message.getCoinsList()) {
                    String s = coin.getCoinName() + ": {coin_shortcut: " + coin.getCoinShortcut() 
                            + ", address_type:" + coin.getAddressType() + ", maxfee_kb: " + coin.getMaxfeeKb() + ", address_type_p2sh: " + coin.getAddressTypeP2Sh() + "}\r\n";
                    content += s;
                }
            }
            
            infoTextArea.setText(content);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Device Info");
        setResizable(false);

        infoTextArea.setEditable(false);
        infoTextArea.setColumns(20);
        infoTextArea.setLineWrap(true);
        infoTextArea.setRows(5);
        jScrollPane1.setViewportView(infoTextArea);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceInfoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceInfoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceInfoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceInfoDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DeviceInfoDialog dialog = new DeviceInfoDialog(new javax.swing.JFrame(), true, ResourceBundle.getBundle("com/bdx/bwallet/tools/ui/Bundle"));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
